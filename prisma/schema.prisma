generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//강사
model Instructor {
  id          String  @id @default(cuid())  //cuid
  name        String                        //강사명
  specialty   String                        //전문분야
  experience  Int                           //경력
  bio         String                        //소개글
  imgPath     String?                       //이미지
  
  licenses  InstructorLicense[]
}

//강사 자격증
model InstructorLicense {
  id              String  @id @default(cuid())  //cuid
  instructor_id   String                        //Instructor FK
  license         String                        //자격증

  instructor   Instructor @relation(fields: [instructor_id], references: [id], onDelete: Cascade)
}

//공지사항 그룹
model NoticeGroup {
  id        String  @id @default(cuid())  //cuid
  group_name String                        //공지사항 그룹명

  notices   Notice[]
}

//공지사항
model Notice {
  id            String    @id @default(cuid())  //cuid
  created_at    DateTime  @default(now())       //작성일
  group_id      String                          //NoticeGroup FK
  description   String                          //설명

  group     NoticeGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
}

//다이빙 코스
model Course {
  id                String  @id @default(cuid())     // cuid
  course_name       String                           // 코스명
  level             String                           // 난이도
  description       String                           // 설명
  duration_start    String                           // 시작 기간
  duration_end      String                           // 종료 기간
  capacity          Int                              // 최대 인원
  location          String                           // 장소
  price             Int                              // 금액
  isClosed          Boolean @default(false)          // 마감여부
}

//투어 코스
model Course {
  id                String  @id @default(cuid())     // cuid
  course_name       String                           // 코스명
  level             String                           // 난이도
  description       String                           // 설명
  duration_start    String                           // 시작 기간
  duration_end      String                           // 종료 기간
  capacity          Int                              // 최대 인원
  location          String                           // 장소
  price             Int                              // 금액
  isClosed          Boolean @default(false)          // 마감여부
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  bookings    Booking[]
  reviews     Review[]
}

model CourseSchedule {
  id        String   @id @default(cuid())
  courseId  String
  startDate DateTime
  endDate   DateTime
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())

  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  bookings Booking[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String?
  rating    Int      // 1-5
  title     String
  content   String   @db.Text
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
}

model Notice {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  isPublic  Boolean  @default(true)
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  category  String?
  isPublic  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
