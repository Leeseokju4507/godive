generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  bookings    Booking[]
  reviews     Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  titleKo     String
  description String   @db.Text
  price       Int
  duration    Int      // in hours
  maxStudents Int
  level       String   // BEGINNER, INTERMEDIATE, ADVANCED
  category    String   // COURSE, TRAINING, TOUR
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  schedules CourseSchedule[]
  bookings  Booking[]
}

model CourseSchedule {
  id        String   @id @default(cuid())
  courseId  String
  startDate DateTime
  endDate   DateTime
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())

  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  bookings Booking[]
}

model Booking {
  id         String        @id @default(cuid())
  userId     String
  courseId   String
  scheduleId String
  status     BookingStatus @default(PENDING)
  totalPrice Int
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  schedule CourseSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String?
  rating    Int      // 1-5
  title     String
  content   String   @db.Text
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
}

model Notice {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  isPublic  Boolean  @default(true)
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  category  String?
  isPublic  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
